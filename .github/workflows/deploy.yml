# .github/workflows/deploy.yml

name: Deploy img3

on:
    push:
        branches:
            - main # 当代码推送到 main 分支时触发
    pull_request: # 在提交 Pull Request 时也触发 (用于检查)
        branches:
            - main

jobs:
    deploy: # 定义一个名为 deploy 的 Job
        name: Build, Test, and Deploy
        runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器

        env: # 在 Job 层面设置环境变量，方便后续步骤使用
            CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
            # 后续可以添加 UNSPLASH_ACCESS_KEY 等 Secret
            # UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}

        steps:
            - name: Checkout code # 第一步：检出代码
              uses: actions/checkout@v4

            - name: Setup Node.js # 第二步：设置 Node.js 环境
              uses: actions/setup-node@v4
              with:
                  node-version: 22 # 使用与你本地一致的 Node.js 版本
                  cache: 'npm'

            # 添加依赖缓存
            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install dependencies # 第三步：安装依赖
              run: npm ci

            - name: Lint code # 第四步：运行 Lint 检查
              # 【修改】移除 filter 参数，让 Turbo 自动发现
              run: npm run lint

            # - name: Run tests # 第五步：(可选，后续添加) 运行测试
            #   # 【修改】如果添加测试步骤，也移除 filter
            #   run: npm run test

            - name: Build projects # 第六步：运行构建
              # 【修改】移除 filter 参数，让 Turbo 自动发现
              run: npm run build

            # --- 【保留】诊断步骤：列出构建产物 ---
            - name: List build output
              run: |
                  echo "--- Listing apps/frontend contents ---"
                  ls -la apps/frontend/
                  echo "--- Listing apps/frontend/.svelte-kit contents ---"
                  ls -la apps/frontend/.svelte-kit/ || true # 使用 || true 避免目录不存在时导致 workflow 失败
                  echo "--- Listing apps/frontend/.svelte-kit/output contents ---"
                  ls -la apps/frontend/.svelte-kit/output/ || true # 使用 || true
                  echo "--- Listing root directory contents ---"
                  ls -la
            # --- 诊断步骤结束 ---
            - name: Install Wrangler CLI # 第七步：安装 Wrangler (如果未在 devDependencies 中)
              run: npm install -g wrangler@latest

            # 创建队列
            - name: Create Queue
              run: npx wrangler queues create img3-queue-sync-tasks-20250401

            # --- 部署步骤 ---
            - name: Deploy API Worker # 第八步：部署 API Worker
              run: npx wrangler deploy -c apps/api-worker/wrangler.jsonc

            - name: Deploy Sync Worker # 第九步：部署 Sync Worker
              run: npx wrangler deploy -c apps/sync-worker/wrangler.jsonc

            - name: Deploy Frontend to Cloudflare Pages # 第十步：部署 Pages
              # 【保留上次修正】明确指定 adapter-cloudflare 的标准输出目录 .svelte-kit/output
              run: npx wrangler pages deploy apps/frontend/.svelte-kit/output --project-name="img3" --branch="main"

            # --- Terraform Apply (可选，暂时不启用) ---
            # - name: Setup Terraform
            #   uses: hashicorp/setup-terraform@v3
            # - name: Terraform Apply
            #   working-directory: ./infrastructure
            #   run: terraform apply -auto-approve
